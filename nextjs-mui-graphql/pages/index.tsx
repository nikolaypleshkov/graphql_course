import { ApolloClient, gql, InMemoryCache } from "@apollo/client";
import { Button, Input, Pagination, Stack, Typography } from "@mui/material";
import { Box } from "@mui/system";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import Characters from "../components/Characters";
import styles from "../styles/Home.module.css";

const Home: NextPage = (results: any) => {
  const initState = results;
  const [characters, setCharacters] = useState(initState.characters);
  const [search, setSearch] = useState("");
  const [pages, setPages] = useState(initState.pages);
  const [currentPage, setCurrentPage] = useState(initState.pages);

  const handlePageChange = async(event: React.ChangeEvent<unknown>, value: number) => {
    setCurrentPage(value);
    
    const results = await fetch("/api/getCharactersPage", {
      method: "POST",
      body: value.toString()
    });
    const { characters, error } = await results.json();
    console.log("res");
    console.log(characters);
    
    
    if(error){
      alert("Something went wrong: " + error);
    }
    else {
      setCharacters(characters);
    }
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box display="flex" justifyContent="center" alignItems="center">
        <form>
          <Stack maxWidth="350px" width="100%" border="none">
            <Input placeholder="Search" value={search} onChange={(e) => setSearch(e.target.value)} />
            <Button>Search</Button>
          </Stack>
        </form>
      </Box>

      <Box mb={4} flexDirection="column" alignItems="center" justifyContent="center" py={8}>
          <Typography variant="h1" mb={8}>
            Rick and Morty
          </Typography>
          <Characters characters={characters} />
        </Box>
      <Pagination count={pages} page={currentPage} onChange={handlePageChange} />
    </div>
  );
};

export async function getStaticProps() {
  const client = new ApolloClient({
    uri: "https://rickandmortyapi.com/graphql/",
    cache: new InMemoryCache(),
  });

  const { data } = await client.query({
    query: gql`
      query {
        characters(page: 1) {
          info {
            count
            pages
          }
          results {
            name
            id
            location {
              id
              name
            }
            origin {
              id
              name
            }
            episode {
              id
              episode
              air_date
            }
            image
          }
        }
      }
    `,
  });

  return {
    props: {
      characters: data.characters.results,
      pages: data.characters.info.pages
    },
  };
  
  
}

export default Home;
